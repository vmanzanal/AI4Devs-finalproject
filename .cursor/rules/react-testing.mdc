---
globs: *.test.tsx,*.test.ts,*.spec.tsx,*.spec.ts
description: React component testing standards using React Testing Library
---

# React Testing Standards

## Testing Philosophy
- Test behavior, not implementation details
- Write tests from user's perspective
- Focus on what users see and interact with
- Test component integration, not just units

## Test Structure
- Use `describe` blocks to group related tests
- Use descriptive test names that explain expected behavior
- Follow Arrange-Act-Assert pattern
- One assertion per test when possible

## React Testing Library Best Practices
- Use semantic queries: `getByRole`, `getByLabelText`, `getByText`
- Avoid `getByTestId` unless necessary for complex components
- Use `userEvent` for user interactions instead of `fireEvent`
- Wait for asynchronous operations with `waitFor` or `findBy` queries

## Component Testing Patterns
```tsx
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import Button from './Button';

describe('Button Component', () => {
  it('renders with correct text', () => {
    render(<Button onClick={() => {}}>Click me</Button>);
    expect(screen.getByRole('button', { name: /click me/i })).toBeInTheDocument();
  });

  it('calls onClick handler when clicked', async () => {
    const handleClick = jest.fn();
    const user = userEvent.setup();
    
    render(<Button onClick={handleClick}>Click me</Button>);
    
    await user.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('is disabled when disabled prop is true', () => {
    render(<Button onClick={() => {}} disabled>Click me</Button>);
    expect(screen.getByRole('button')).toBeDisabled();
  });
});
```

## Custom Hook Testing
```tsx
import { renderHook, act } from '@testing-library/react';
import { useCounter } from './useCounter';

describe('useCounter', () => {
  it('should initialize with default value', () => {
    const { result } = renderHook(() => useCounter());
    expect(result.current.count).toBe(0);
  });

  it('should increment count', () => {
    const { result } = renderHook(() => useCounter());
    
    act(() => {
      result.current.increment();
    });
    
    expect(result.current.count).toBe(1);
  });
});
```

## Testing Guidelines
- Mock external dependencies and APIs
- Use test utilities for common setup (render with providers)
- Test error states and edge cases
- Ensure accessibility with screen reader queries
- Test responsive behavior when applicable
- Use MSW for API mocking in integration tests